// Code generated by counterfeiter. DO NOT EDIT.
package changerFakes

import (
	sync "sync"

	changer "github.com/bookun/slack-status-changer"
)

type FakeSlackClient struct {
	SendStatusStub        func(string) error
	sendStatusMutex       sync.RWMutex
	sendStatusArgsForCall []struct {
		arg1 string
	}
	sendStatusReturns struct {
		result1 error
	}
	sendStatusReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSlackClient) SendStatus(arg1 string) error {
	fake.sendStatusMutex.Lock()
	ret, specificReturn := fake.sendStatusReturnsOnCall[len(fake.sendStatusArgsForCall)]
	fake.sendStatusArgsForCall = append(fake.sendStatusArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("SendStatus", []interface{}{arg1})
	fake.sendStatusMutex.Unlock()
	if fake.SendStatusStub != nil {
		return fake.SendStatusStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.sendStatusReturns
	return fakeReturns.result1
}

func (fake *FakeSlackClient) SendStatusCallCount() int {
	fake.sendStatusMutex.RLock()
	defer fake.sendStatusMutex.RUnlock()
	return len(fake.sendStatusArgsForCall)
}

func (fake *FakeSlackClient) SendStatusCalls(stub func(string) error) {
	fake.sendStatusMutex.Lock()
	defer fake.sendStatusMutex.Unlock()
	fake.SendStatusStub = stub
}

func (fake *FakeSlackClient) SendStatusArgsForCall(i int) string {
	fake.sendStatusMutex.RLock()
	defer fake.sendStatusMutex.RUnlock()
	argsForCall := fake.sendStatusArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSlackClient) SendStatusReturns(result1 error) {
	fake.sendStatusMutex.Lock()
	defer fake.sendStatusMutex.Unlock()
	fake.SendStatusStub = nil
	fake.sendStatusReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSlackClient) SendStatusReturnsOnCall(i int, result1 error) {
	fake.sendStatusMutex.Lock()
	defer fake.sendStatusMutex.Unlock()
	fake.SendStatusStub = nil
	if fake.sendStatusReturnsOnCall == nil {
		fake.sendStatusReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.sendStatusReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSlackClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.sendStatusMutex.RLock()
	defer fake.sendStatusMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSlackClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ changer.SlackClient = new(FakeSlackClient)
